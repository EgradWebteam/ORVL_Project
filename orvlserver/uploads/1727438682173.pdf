const express = require('express');  
const mysql = require('mysql2');  
const bodyParser = require('body-parser');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
 
const app = express();  
const port = 8000;
 
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true })); 
app.use('/uploads', express.static('public/uploads'));
      
 
// Configure CORS to allow requests from your React frontend (running on localhost:3000)
app.use(cors({
    origin: 'http://localhost:3000',  // Allow requests only from this origin
    methods: ['GET', 'POST'],  // Allow only GET and POST requests
    allowedHeaders: ['Content-Type'],  // Allow Content-Type header
}));
 // Set up multer for image uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        const ext = path.extname(file.originalname);
        cb(null, `${Date.now()}${ext}`);
    }
});
const upload = multer({ storage });

// Create a connection pool
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'orvl_project_database'
});
 
// Route to fetch all exams
app.get('/api/exams', (req, res) => {
    pool.getConnection((err, connection) => {
        if (err) {
            console.error('Error connecting to MySQL:', err);
            return res.status(500).send('Database connection error');
        }
        connection.query('SELECT * FROM exams', (err, results) => {
            connection.release();  // Release connection back to the pool
            if (err) {
                console.error('Error fetching exams:', err);
                return res.status(500).send('Error fetching exams');
            }
            res.json(results);  
        });
    });
});
 
// Route to fetch subjects for a specific exam
app.get('/api/exam/:exam_id/subjects', (req, res) => {
    const exam_id = req.params.exam_id;
    pool.getConnection((err, connection) => {
        if (err) {
            console.error('Error connecting to MySQL:', err);
            return res.status(500).send('Database connection error');
        }
        connection.query('SELECT * FROM subjects WHERE exam_id = ?', [exam_id], (err, results) => {
            connection.release();  // Release connection back to the pool
            if (err) {
                console.error('Error fetching subjects:', err);
                return res.status(500).send('Error fetching subjects');
            }
            res.json(results);
        });
    });
});
 
// Fetch topics for a specific subject
app.get('/api/subjects/:subject_id/topics', (req, res) => {
    const subject_id = req.params.subject_id;
    pool.getConnection((err, connection) => {
        if (err) {
            console.error('MySQL Connection Error:', err);
            return res.status(500).send('Database connection error');
        }
        connection.query('SELECT * FROM topics WHERE subject_id = ?', [subject_id], (err, results) => {
            connection.release();
            if (err) {
                console.error('Error fetching topics:', err);
                return res.status(500).send('Error fetching topics');
            }
            res.json(results);
        });
    });
});
 
// Route to handle form submission
app.post('/api/submit-selection', (req, res) => {
    const { exam_id, selectedsubjects } = req.body;  // Destructure examId and selected subjects from the request body
 
    if (!exam_id || !selectedsubjects || selectedsubjects.length === 0) {
        return res.status(400).send('Exam and at least one subject must be selected');
    }
 
    pool.getConnection((err, connection) => {
        if (err) {
            console.error('Error connecting to MySQL:', err);
            return res.status(500).send('Database connection error');
        }
 
        // Loop through each selected subject and insert it into the Selections ta('12th class Percentage is required.');
  if (!btech_percentage) errors.push(' BTech Percentag is required.');
  if (!university_roll_no) errors.push('University Roll No is required.');
  if (!college_city) errors.push('Branch is required.');
  if (!college_state) errors.push('College City is required.');
  if (!college_name) errors.push('College State is required.');
  if (!branch) errors.push('College Name is required.');
  if (!tenth_certificate) errors.push('10th Class certificate is required.'); 
  if (!twelfth_certificate) errors.push('12th Class certificate is required.'); 
  if (!btech_certificate) errors.push('B.Tech certificate is required.');
  if (!coaching) errors.push('Coaching details are required.');

  if (coaching === 'yes') {
    if (!batch) errors.push('Batch is required.');
    if (!rollno) errors.push('Roll No is required.');
    if (!centername) errors.push('Center Name is required.');
  } else if (coaching === 'no') {
  }
  

  if (errors.length > 0) {
    return res.status(400).json({ message: errors.join(' ') });
  }
  const coachingDetails = coaching === 'no' ? [null, null, null] : [batch, rollno, centername];
  const [batchValue, rollnoValue, centernameValue] = coachingDetails;
const data = [
    name, fathername, mobile_no, gender, email, dob,
    present_streetadd, present_addressline2, present_city, present_state, present_zipcode, present_country,
    permanent_streetadd, permanent_addressline2, permanent_city, permanent_state, permanent_zipcode, permanent_country,
    tenth_percentage, twelfth_percentage, btech_percentage, university_roll_no, college_city,
    college_state, college_name, branch,
    tenth_certificate, twelfth_certificate, btech_certificate, coaching,
    coaching === 'yes' ? batch : null,  // Add batch only if coaching is 'yes'
    coaching === 'yes' ? rollno : null, // Add rollno only if coaching is 'yes'
    coaching === 'yes' ? centername : null 
  ];

  // Conditionally add batch, rollno, centername based on coaching
  if (coaching === 'yes') {
    data.push(batch, rollno, centername);
  } else {
    data.push(null, null, null);
  }

  try {
    // Insert data into the database
    await promisePool.query(
      `INSERT INTO users (
        name, fathername, mobile_no, gender, email, dob,
        present_streetadd, present_addressline2, present_city, present_state, present_zipcode, present_country,
        permanent_streetadd, permanent_addressline2, permanent_city, permanent_state, permanent_zipcode, permanent_country,
        tenth_percentage, twelfth_percentage, btech_percentage, university_roll_no, college_city,
        college_state, college_name, branch,
        tenth_certificate, twelfth_certificate, btech_certificate, coaching,batch,rollno,centername
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)`,
      [
        name, fathername, mobile_no, gender, email, dob,
        present_streetadd, present_addressline2, present_city, present_state, present_zipcode, present_country,
        permanent_streetadd, permanent_addressline2, permanent_city, permanent_state, permanent_zipcode, permanent_country,
        tenth_percentage, twelfth_percentage, btech_percentage, university_roll_no, college_city,
        college_state, college_name, branch,
        tenth_certificate, twelfth_certificate, btech_certificate, coaching,
        coaching === 'yes' ? batch : null,
  coaching === 'yes' ? rollno : null,
  coaching === 'yes' ? centername : null
      ]
    );
    res.json({ message: 'Registration successful!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error registering user!' });
  }
});

// Route to get user details
app.get('/users', async (req, res) => {
  try {
    const [rows] = await promisePool.query('SELECT * FROM users');
    res.json(rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error fetching user details!' });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    // Multer-specific errors
    res.status(400).json({ message: err.message });
  } else if (err) {
    // General errors
    res.status(500).json({ message: err.message });
  } else {
    next();
  }
});

// Start server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
       const insertPromises = videos.map(video => {
            return new Promise((resolve, reject) => {
                connection.query(
                    'INSERT INTO videos (exam_id, subject_id, topic_id, video_name, video_link) VALUES (?, ?, ?, ?, ?)',
                    [video.exam_id, video.subject_id, video.topic_id, video.video_name, video.video_link],
                    (err, results) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(results);
                        }
                    }
                );
            });
        });

        Promise.all(insertPromises)
            .then(() => {
                connection.release();
                res.status(200).json({ message: 'Videos added successfully' });
            })
            .catch((err) => {
                connection.release();
                console.error('Error adding videos:', err);
                res.status(500).json({ error: 'Error adding videos' });
            });
    });
});


 // Modify your backend route to include images
// app.get('/api/exams', (req, res) => {
//     pool.getConnection((err, connection) => {
//       if (err) {
//         console.error('Error connecting to MySQL:', err);
//         return res.status(500).send('Database connection error');
//       }
  
//       const query = `
//         SELECT exams.exam_id, exams.exam_name, exam_images.image_url 
//         FROM exams 
//         LEFT JOIN exam_images ON exams.exam_id = exam_images.exam_id`;
  
//       connection.query(query, (err, results) => {
//         connection.release();
//         if (err) {
//           console.error('Error fetching exams:', err);
//           return res.status(500).send('Error fetching exams');
//         }
//         res.json(results);
//       });
//     });
//   });
  

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
 